Jobs

Bash supports foreground and background jobs. The foreground job is
the command you just ran, and the console blocks until the job is
complete.

A background job continues to run while the console is unblocked. A
job is started in the background by appending on the command line.

Ctrl-Z stops the foreground job, and it can then be placed in the
background by the bg command.

fg brings a background job into the foreground.

jobs list the current jobs, showing status (Stopped or Running).

----------------------------------------------------------------------

Jobs in marcel

- Change Main to always run a command on a thread.

- Normal behavior (foreground job) is to block until the thread
  completes.

- For background, simply don't block.

? Signal handling is only on the main thread, I think. So how does
ctrl-c handling control the thread?

- Ctrl-z generates SIGTSTP. Unblock the main (console-servicing)
  thread.

- Maintain an array of threads to implement job control.

----------------------------------------------------------------------

Op design:

- Operate on job id (-j|--job) or pid (-p|--process). Flags are
  optional, assume job id if not specified.

- Kill: Take signal with -s|--signal flag, or as negative number.

- Job output: Exclude pid for dead process.

----------------------------------------------------------------------

Jobs reconsidered

There is a main process. There are jobs, which run in processes
created by the multiprocessing module. A command runs in a job, unless
the conditions for Main.run_immediate are met.  The main loop (which
reads from the console) waits until the current job completes before
issuing the next prompt.  This has some problems:

- Capturing environment changes

- Jobs rely on the multiprocessing module, which uses standard
  pickling. And not everything can be pickled.

- run_immediate is only a heuristic (see bug 104).

A command run immediately avoids these problems, but cannot be
suspended or run in background. That's OK for something that finished
"quickly". Things that don't finish quickly:

- gen 0 | ...

- timer 1 | ...

- ls -fr | ..., for a sufficiently large directory

- set ops, depending on the size of the inputs. More generally,
  anything that gathers all input, e.g. sort.

Idea: Never run immediately, and fix job problems. But the pickling
problem is unfixable. And capturing environment changes is another bag
of heuristics.

Idea: Use threading instead of multiprocessing.
