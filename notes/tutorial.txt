Introduction

Marcel is a shell. The main idea is to rely on piping as the primary means of composition, as with any Unix or Linux shell. However, instead of passing strings from one command to the next, marcel passes Python values: builtin types such as lists, tuples, strings, and numbers; but also objects representing files and processes.

Linux has extremely powerful commands such as awk and find. Most people know how to do a few simple operations using these commands. But it is not easy to exploit their full power due to their reliance on extensive "sublanguages" which do:

    Filtering: What data is of interest?
    Processing: What should be done with the data?
        Formatting: How should results be presented?

Marcel has no sublanguages. You use marcel operators combined with Python code to filter data, process it, and control command output.

The commands and syntax supported by a shell constitute a language which can be used to create scripts. Of course, in creating a script, you rely on language features that you typically do not use interactively: control structures, data types, and abstraction mechanisms (e.g. functions), for example. Viewed as a programming language, shell scripting languages are notoriously bad. I didn't think it was wise to bring another one into the world. So marcel takes a different approach, using Python as a scripting language, (see below for more on scripting).

Installation
Help
Basic usage
The environment
Configuration
Colors
Navigation
Streams and objects
Functions
Pipelines
Saving and recalling streams
Escapes
Scripting


----------------------------------------------------------------------

Installing marcel

To install marcel for your own use:

python3 -m pip install marcel

To install for the entire system:

sudo python3 -m pip install --prefix /usr/local marcel

(Or change /usr/local to whatever makes sense for your system.)

Assuming marcel installs successfully, start it by running marcel:

    marcel

And then run the version command to see that marcel is working:

    version


Help

Marcel's help facility provides reference information on all aspects of marcel: concepts, operators, and objects. Running "help" provides top-level usage information, and an initial list of topics. Running "help TOPIC" provides help on the given topic.


Basic usage

As with any other shell, you type in commands at the prompt.  In marcel terminology, an operator is a single command, built in to marcel. For example, the pwd operator prints the current directory:

    pwd

You can also run host OS executables. Marcel doesn't have a builtin operator named which, but you can run which (on Linux and Mac, at least), because which is an executable in the host operating system.

    which cc

In some cases, marcel and the host OS will have operators and commands with the same name. In these cases, the marcel operator serves the same general purpose as the host OS executable, but typically has fewer options, and its behavior has been designed to fit into marcel better. An example of this is ls. Example:


    cd ~/git/marcel/marcel
    ls

Marcel maintains a set of environment variables. Like many other Linux shells, there are entries for USER (your username), PWD (the current directory), and there are other entries. You can examine the complete environment by running the env command:

    env

You can also examine one of the variables by enclosing the variable's name in parentheses, e.g.

    (USER)

In general, parentheses delimit aribtrary Python expressions, so you can also do arithmetic:

    ((1 + 5 ** (1/2)) / 2)

or computations involving other Python types, e.g.

    ('abc' * 3)
    (list(range(5)))

The history command generates a stream containing the most recent commands you have entered:

    history

You can edit the most recent command by running the edit command.  Or to edit an earlier command, run "edit N", where N is the identifier of a command printed by the history operator, (one of the blue numbers above). As in other shells, the value of the EDITOR environment variable can be set to determine the editor to be used for editing commands.

You can also use command-line editing using familiar controls, e.g.

- Ctrl-A: Go to the beginning of the line.
- Ctrl-E: Go to the end of the line.
- Ctrl-W: Delete the previous word.
- Ctrl-U: Delete everything before the cursor.
- Ctrl-K: Delete everything starting at the cursor.
- Ctrl-R: Reverse search command history.
- Up arrow, Ctrl-P: Recall previous command in history.
- Down arrow, Ctrl-N: Recall next command in history.

You can also run previous commands. !! runs the most recent command, and !N runs command N.


The marcel environment 

As with any other shell, marcel has environment variables. In Python terms, these variables exist in a namespace that is made available to marcel commands. So, for example, you can examine the value of the HOME variable as follows:

    (HOME)

The parentheses delimit the Python expression HOME. That symbol is located in marcel's namespace (the environment), and the value is printed.

You can create or modify environment variables by using convnetional assignment syntax, e.g.

    x = (1)
    (x)

Your environment variables can store structured types too. For example, you can assign a list:

    x = ([1, 'two', 4-1])
    (x)

[1, 'two', 4-1] is a list, and by enclosing this expression in parentheses, the value of the list can be assigned to the variable x.

Some Python types, like lists, can be updated, and this can be done through marcel. For example, to append to x's list:

    (x.append(4))
    (x)

Finally, environment variables can be deleted:

    delete x
    (x)


Configuration

Marcel is customized on startup by executing ~/.marcel.py. You don't need to create this file, it will be created for you the first time you run marcel. What ~/.marcel.py does is to initialize the marcel namespace -- it defines symbols that are available for use in marcel commands, or that customize marcel's behavior.

The default ~/.marcel.py begins with an import:

    from marcel.builtin import *

This brings in a few functions and types that are important in marcel usage. For example, the symbol now is defined to be time.time(), allowing you to call now() to obtain seconds since the epoch:

    (now())

The default ~/.marcel.py also provides a rudimentary definition of PROMPT, which controls the appearance of your shell prompt:

    PROMPT = [lambda: PWD, ' $ ']

PWD is the environment variable identifying your current directory. 'lambda: PWD' creates a function, returning the value of PWD each time a prompt is displayed. ' $ ' is a string printed following the value of PWD. This definition results in a prompt that looks like this:

    /home/jao/git/marcel $ 

A more sophisticated prompt can be created with other environment variables, and adding colors (described below). This prompt specification:

PROMPT = [
    Color(5, 0, 0, BOLD),
    'M-',
    MARCEL_VERSION,
    ' ',
    Color(2, 1, 0, BOLD),
    USER,
    '@',
    HOST,
    Color(5, 5, 5),
    ':',
    Color(3, 2, 0, BOLD),
    lambda: ('~' + PWD[len(HOME):]) if PWD.startswith(HOME) else PWD,
    '$ '
]

results in this prompt:

Another variable, PROMPT_CONTINUATION defines the prompt to be used for multi-line commands.

Colors 

Marcel colorizes its prompt, and the output describing some objects, e.g. Files and Processes.  Marcel provides two types, Color and ColorScheme, so that you can customize colorization.

A Color is constructed by providing RGB (red/green/blue) values, in the range 0-5. So white would be Color(5, 5, 5), and pure red would be Color(5, 0, 0). Colors are applied to text, and you can include styling attributes BOLD, ITALIC or both (BOLD | ITALIC) as a last argument to color, e.g. Color(5, 3, 0, BOLD).

A ColorScheme is a set of colors for specific purposes. The default configuration file, generated on startup, includes a commented-out color scheme definition. If you'd like, remove the # characters to see the effect using this color scheme, by running the ls command.  You can also add colors to the prompt, as shown above. In both cases, the changes to configuration will take effect as soon as the changes are saved.

Navigation

Marcel keeps track of the current directory, and a directory stack, as in other shells. (The current directory is always the top item on the directory stack.) The commands for operating on directories should be familiar:

- pwd: prints the current directory.

- cd: Change the current directory to the one specified on the command line.

- pushd: Push the specified directory onto the directory stack. Without arguments, swap the top two directory stack items. This causes the current directory to change.

- popd: Remove the top item on the directory stack, causing the current directory to change.

- dirs: Prints the directory stack, starting with the current directory. (The directory stack simply reports the value of the DIRS environment variable.)

Streams and objects

The ls command lists files, like any Linux shell. But there are important differences. The Linux ls executable prints strings describing files, either multiple file names per line; or, if you specify the -l flag, then one string per line, with each line including file attributes such as mode, modification time, owner, group, and others. I.e., the printing and formatting logic is part of the ls executable.

By contrast, marcel's ls operator generates a stream of File objects, and has no responsibility for printing or formatting -- if you run "help ls" you will see no such options.

The stream of File objects generated by ls can be passed to the output operator, out:

    ls | out

out takes a stream of objects, and prints each, one per line. The net effect is a listing very much like what you would see by running "ls -l" from bash.

Marcel appends an out operator to your command line, if you don't specify it yourself. So you can get the same listing of files by just writing ls:

    ls

out has a variety of options controlling how the incoming stream of objects is printed. These include writing to a file. For example, if you want to save the result of ls in /tmp/files:

    ls | out -f /tmp/files

Or to append to /tmp/files:

    ls | out -a /tmp/files

(You can redirect using > and >>, but those operate on environment variables, not files. This is discussed in more detail later.)


Functions

Several marcel operators take functions as arguments. Functions are written in Python. For example, the files produced by the ls operator can be piped to the select operator, which uses a function to keep only files modified in the past day:

    ls | select (lambda f: now() - f.mtime < days(1))

These functions are always delimited by parentheses. Here, the function takes one argument, f, which will be bound to Files piped in from ls. now() is a function built in to marcel which returns the current time, as seconds since the epoch. f.mtime returns the modification time of file f. days(1) invokes another builtin function that returns the number of seconds in one day.

The net effect is to filter the Files returned by ls by keeping only those modified in the last day. Remember that an out operator is appended if needed, so this command prints the qualifying files.

The map operator uses a function to transform incoming data. For example, this command lists files (only, thanks to the -f flag) and prints the file's name and number of lines in each:

    ls -f | map (f: (f.name, f.size))

You can write functions with no arguments. For example, to evaluate 2**50:

    map (2**50)

In cases like this -- map calling a function with no arguments, as the first thing on the command line -- you can omit writing 'map', it will be understood. So this works too:

    (2**50)

In Python, the symbols in a function are always resolved against a namespace. Marcel functions run in the marcel namespace, a Python namespace maintained by marcel. This namespace includes environment variables, so you can use this abbreviated notation to examine environment variables:

    (USER)

You can add symbols to the marcel namespace in a number of ways:

- import modules in ~/.marcel.py, the configuration file.
- Define symbols in ~/.marcel.py.
- Use the import statement

For example, math.pi is not present in the marcel namespace by default:

    (pi)
    (math.pi)

However, you can import math, and then use its symbols:

    import math
    (math.pi)

("import math *" would import the symbols contained in math, similar to the Python statement "from math import *.)

    

Pipelines

A sequence of operators, connected by pipes, is a pipeline. While marcel usage often involves just running one pipeline and seeing the results, you can also store pipelines for later use, similar to the writing of a function in a programming language.

For example, here is a pipeline that searches the current directory recursively, and lists the files that have been modified in the past day:

    recent = [ls -fr | select (f: now() - f.mtime < days(1))]

This creates a pipeline, and assigns it to the environment variable py. Running it:

    recent

You can generalize this, by paramaterizing the pipeline. For example, here is a pipeline that explores the current directory recursively and lists the files that have been modified within a given number of days:

    recent = [n: ls -fr | select (f: now() - f.mtime < days(n))]

You can specify a value for the parameter positionally:

    recent (1)

recent 1 would bind the string '1' to the parameter n. We want the integer 1, which is obtained by using parentheses to delimit a Python expression.

If you prefer, you can use a short flag, if the parameter is a string of size 1:

    recent -n 1

You can also use a long option, regardess of the length of the parameter's name, e.g. recent --n 1.

Saving and recalling streams

Streams carry objects between operators. You can also save and recall streams. For example, to store the stream of Files created by ls:

    ls *.py > pyfiles

This will replace the value of pyfiles, if there is one. Or, to append to pyfiles: ls *.py >> pyfiles.

You can recall a stored stream by placing the variable before the > symbol. E.g., to find Files of size >= 15000, from the previously saved result:

    pyfiles > select (f: f.size > 15000)

You can use > to copy stored streams from one variable to another, e.g. pyfiles > pyfiles2

Pipelines can also be used as arguments to operators, as shown in this example:

    ps | ifelse (p: username(p.uid) == 'root') [> root] > other

The ps operator outputs a stream of Process objects, each representing one current process. ifelse evaluates a predicate for each input, in this case, checking whether the process, p, is owned by root. (username() is a marcel builtin function). If the predicate evaluates to true for a process p, then p is passed to the bracketed pipeline immediately following the predicate, [> root]. This pipeline, an argument to the ifelse operator, stores its input in the variable root. If the predicate evaluates to false, then p is passed downstream, to be stored in the variable other.

There is also an ifthen operator. It is just like ifelse except that all inputs are passed downstream. I.e., an item causing the predicate to evaluate to true will be passed to both pipelines, the pipeline argument, and downstream.

Pipelines storing and loading variables are particularly useful with marcel's set operators. For example, suppose that we explore a directory recursively, once to find recently modified files, and once to find .py files:

    ls -fr | select (f: now() - f.mtime < days(1)) > recent
    ls -fr | select (f: f.suffix =='.py') > py

We can now use set operators with these variables as inputs. For example, to find recently updated .py files:

    recent > intersect [py >]

This passes the recent files to the intersect operator. The second input to intersect comes from the pipeline argument, which loads the py files.

To find python files that have not been updated recently:

    py > difference [recent >]

There is also a union operator.


Escapes

If you try to use a command that is not built in to marcel, then marcel will see if there is an executable of the same name. For example, there is no "cat" operator in marcel, but there is a useful Linux operator by that name, so this works:

    cat ~/.profile

If you want to be explicit about using an executable (and not an operator), you can use the bash operator. So, for example, if you really want to use the host operating system's pwd command, instead of marcel's pwd operator, you can do so as follows:

    pwd

Mixing host executables and marcel operators in the same pipeline works well. At the boundary between the two, strings are passed. Between marcel operators, Python values are passed.

For example, this command, which combines operators and executables, lists the usernames of users whose shell is /bin/bash. map and select are marcel operators, while cat, xargs and echo are Linux executables.

​    cat /etc/passwd \
    | map (line: line.split(':')) \
    | select (*line: line[-1] == '/bin/bash') \
    | map (*line: line[0]) \
    | xargs echo

​- cat /etc/passwd: Obtain the contents of the file. Lines are piped to subsequent commands.
- map (line: line.split(':')): Split the lines at the : separators, yielding 7-tuples.
- select (*line: line[-1] == '/bin/bash'): select those lines in which the last field is /bin/bash.
- map (*line: line[0]): Keep the username field of each input tuple.
- xargs echo: Combine the incoming usernames into a single line, which is printed to stdout.

Another kind of escape is the sudo operator. It works very much like the host operating system's sudo command, allowing you to execute some commands that you would otherwise not be permitted to execute. You configure marcel's sudo in the same way as that of the host OS, (e.g. editing /etc/sudoers). One difference is that marcel's sudo operator takes a pipeline argument, instead of a host OS command. For example, to identify recent changes to your postgres configuration:

    sudo [ls -fr /etc/postgresql | select (f: now() - f.mtime < hours(1))]

Scripting

A simple form of scripting is to just write marcel commands in a text file. From an ordinary shell, you can execute this script by redirecting it to the marcel executable, e.g. marcel < script.marcel.

A more powerful form of scripting can be done from Python, using the marcel.api module. With this module, you have access to the operators of marcel, neatly integrated into Python. For example, here is the "recent files" example in Python:

    import os
    from marcel.api import *

    for file in (ls(os.getcwd(), file=True, recursive=True) |
                 select(lambda f: now() - f.mtime < days(1))):
        print(file)

ls(os.getcwd(), file=True, recursive=True) invokes the ls operator as a function, passing in the current directory, requesting only files (file=True), and recursive exploration of the directory (recursive=True). The resulting Files are passed to the select function, which checks for Files modified in the past day. The shell part of the command (ls ... | select ...) yields a Python iterator, so that the resulting Files can be accessed using a for loop.
