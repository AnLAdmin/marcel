Introduction

Marcel is a shell. The main idea is to rely on piping as the primary
means of composition, as with any Unix or Linux shell. However,
instead of passing strings from one command to the next, marcel passes
Python values: builtin types such as lists, tuples, strings, and
numbers; but also objects representing files and processes.

Linux has extremely powerful commands such as awk and find. Most
people know how to do a few simple operations using these
commands. But it is not easy to exploit their full power due to their
reliance on extensive "sublanguages" which do:

    Filtering: What data is of interest?
    Processing: What should be done with the data?
    Formatting: How should results be presented?

Marcel has no sublanguages. If you know Python, then you already know
the language used by marcel to exploit the full power of marcel's
operators.  You use marcel operators combined with Python code to
filter data, process it, and control command output.

The commands and syntax supported by a shell constitute a language
which can be used to create scripts. Of course, in creating a script,
you rely on language features that you typically do not use
interactively: control structures, data types, and abstraction
mechanisms (e.g. functions), for example. Viewed as a programming
language, shell scripting languages are notoriously bad. I didn't
think it was wise to bring another one into the world. So marcel takes
a different approach, using Python as a scripting language, (see below
for more on scripting).


Installing marcel

To install marcel for your own use:

python3 -m pip install marcel

To install for the entire system:

sudo python3 -m pip install --prefix /usr/local marcel

(Or change /usr/local to whatever makes sense for your system.)

Assuming marcel installs successfully, start it by running marcel:

    marcel

And then run the version command to see that marcel is working:

    version


Help

Marcel's help facility provides reference information on all aspects
of marcel: concepts, operators, and objects. Running "help" provides
top-level usage information, and an initial list of topics. Running
"help TOPIC" provides help on the given topic.


Basic usage

As with any other shell, you type in commands at the prompt.  In
marcel terminology, an operator is a single command, built in to
marcel. For example, the pwd operator prints the current directory:

    pwd

You can also run host OS executables. Marcel doesn't have a builtin
operator named which, but you can run which (on Linux and Mac, at
least), because which is an executable in the host operating system.

    which cc

In some cases, marcel and the host OS will have operators and commands
with the same name. In these cases, the marcel operator serves the
same general purpose as the host OS executable, but typically has
fewer options, and its behavior may have been modified to fit into
marcel better. An example of this is ls. Run "help ls" to see details
of the ls operator. One obvious difference between marcel's ls
operator, and the Linux ls executable, is that marcel's ls operator
has no options controlling output. You always get a listing
reminiscent of Linux's "ls -l", e.g.

    cd ~/git/marcel/marcel
    ls

In general, a marcel operator outputs a stream of objects, and any
objects at the end of the command are printed, though an implicit use
of the out operator. Out prints each received object, one per line. ls
generates File objects, and printing a File includes mode information,
user and group, file size, modification time, and the file's name,
(all this is very much like Linux "ls -l" output).

Marcel maintains a set of environment variables. Like many other Linux
shells, there are entries for USER (your username), PWD (the current
directory), and there are other entries. You can examine the complete
environment by running the env command:

    env

You can also examine one of the variables by enclosing the variable's
name in parentheses, e.g.

    (USER)

In general, parentheses delimit Python expressions, so you can do
arithmetic:

    ((1 + 5 ** (1/2)) / 2)

or computations involving other Python types, e.g.

    ('abc' * 3)
    (list(range(5)))

The history command generates a stream containing the most recent
commands you have entered:

    history

You can edit the most recent command by running the edit command.  Or
to edit an earlier command, run "edit N", where N is the identifier of
a command printed by the history operator. As in other shells, the
value of the EDITOR environment variable can be set to determine the
editor to be used for editing commands.

*** Command-line editing.

You can also run previous commands. !! runs the most recent command,
and !N runs command N.


The marcel environment 

As with any other shell, marcel has environment variables. In Python
terms, these variables exist in a namespace that is made available to
marcel commands. So, for example, you can examine the value of the
EDITOR variable as follows:

    (EDITOR)

The parentheses delimit the Python expression EDITOR. That symbol is
located in marcel's namespace (the environment), and the value is
printed.

You can create or modify environment variables by using convnetional
assignment syntax, e.g.

    x = (1)
    (x)

This assigns the integer 1 to x, and then prints out the value of x. 
By contrast, this assigns the string '1' to x: 

    x = 1

I.e., the marcel command-line is string-oriented. If you want to work
with values of other types, these values need to be created as Python
expressions, and Python expressions need to be enclosed in
parentheses.

Your environment variables can be structured types too. For example,
you can assign a list:

    x = ([1, 'two', 4-1])
    (x)

[1, 'two', 4-1] is a list, and by enclosing this expression in
parentheses, the value of the list can be assigned to the variable x.

Some Python types, like lists, can be updated, and this can be done
through marcel. For example, to append to x's list:

    (x.append(4))
    (x)

Finally, environment variables can be deleted:

    delete x
    (x)


Configuration

Marcel is customized on startup by executing ~/.marcel.py. You don't
need to create this file, it will be created for you the first time
you run marcel. What ~/.marcel.py does is to initialize the marcel
namespace -- it defines symbols that are available for use in marcel
commands, or that customize marcel's behavior.

The default ~/.marcel.py begins with an import:

    from marcel.builtin import *

This brings in a few functions and types that are important in marcel
usage. For example, the symbol now is defined to be time.time(),
allowing you to call now() to obtain seconds since the epoch:

    (now())

The default ~/.marcel.py also provides a rudimentary definition of
PROMPT, which controls the appearance of your shell prompt:

    PROMPT = [lambda: PWD, ' $ ']

PWD is the environment variable identifying your current
directory. 'lambda: PWD' creates a function, returning the value of
PWD each time a prompt is displayed. ' $ ' is a string printed
following the value of PWD. This definition results in a prompt that
looks like this:

    /home/jao/git/marcel $ 

Another variable, PROMPT_CONTINUATION defines the prompt to be used
for multi-line commands.

Colors and the color scheme

Marcel colorizes its prompt, and the output describing some objects,
e.g. Files and Processes. 

Marcel includes a Color type, that allows you to defined your own
colors. A Color is constructed by providing RGB (red/green/blue)
values, in the range 0-5. So white would be Color(5, 5, 5), and pure red
would be Color(5, 0, 0). Colors are applied to text, and you can
include styling attributes BOLD, ITALIC or both (BOLD | ITALIC) as a
last argument to color, e.g. Color(5, 3, 0, BOLD).

Marcel relies on a ColorScheme object for colorizing output. The
ColorScheme is a set of colors for specific purposes. 

*** COMPLETE THIS ONCE BUG 86 is fixed



- Colors and color scheme
- PROMPT
- dirs, pushd, popd, cd, pwd


Streams and functions

- ls
- ls | select
- map
- builtin functions
- (...)
- import
- red


Pipelines

- Assigning pipeline
- Pipeline with args
- ifthen, ifelse
- set ops
- join
- > and >>, store and load

Escapes

- bash
- sudo

Databases


Remote


Scripting

- marcel scripts
- marcel.api

Uncategorized

- ps
- sort, unique, reverse
- head, tail
- window
- version
