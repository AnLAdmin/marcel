    load x | select (PREDICATE) ... | store x 

works as a loop:

- x is a list. load reads an item, the pipeline computes a new item
  which store appends.

- When PREDICATE returns false, there is nothing to store, and the
  iteration over x completes, ending the loop. I.e., only one item of
  the list (at a time) is used to drive the loop.

- store both appends to x, and outputs x.

A general purpose loop can be defined using pipeline vars:

    loop = [acc, pipeline: load x | pipeline | store x]

And then to use it, e.g. to generate fibonacci numbers:

    loop ([(0, 1)]) [select (x, y: x < 1000000) | map (x, y: (y, x + y)]

([(0, 1)]) initializes the accumulator. Keep going as long as x <
1000000. The map function maps a pair of successive fibonacci number
to the next pair.

It's cool that a general purpose loop can be defined in this way, but
it isn't very good. acc (accumulator) is a list, but for control
purposes, we only need the last item. Also, the initial value has to
be a list of one tuple of inputs: [(0, 1)]. The list wrapper is there
because of the implementation (store and load using a list). Ideally,
the initial value would be just (0, 1).

It's a useful construct (generating a sequence of fibonacci numbers
isn't possible in marcel otherwise), but this is a bad
implementation. So introduce a loop operator:

    loop INIT PIPELINE

The pipeline can be thought of as a function, as in the fibonacci
example above, with two params x and y. INIT is the initial value
passed to these params. The last operator of the loop generates new
param values which are output AND passed to the first op for the next
iteration.

The implementation replaces the list with a singleton container. I.e.,
imagine that load reads the value, and store replaces it. If store
fails to replace the value (e.g. because the select predicate
evaluates to false), then the loop terminates because load encounters
the end of its input.

......................................................................

loop (0, 1) [select (i, f: i <= 10) \|
             yield (i, f: f) \|
             map (i, f: (i + 1, f * (i + 1)))]

yield generates loop output, store (part of the loop implementation)
does not.

OR

loop (0, 1) [select (i, f: i <= 10) \|
             map (i, f: (i + 1, f * (i + 1)))]

loop generates output before the first op. So output from this would
be (0, 1) ... (10, whatever).

----------------------------------------------------------------------

THIS ISN'T VERY GOOD

Here is a loop to print 0..9:

     loop (0) [select (x: x < 10) | emit | map (x: x + 1)]

It doesn't generalize to a loop that prints 0..9 x 0..9. A nested loop
would need access to the loop variable, so there would have to be a
function (x: ...). But we need a loop, not a function, and we can't
put a loop inside the function.

Also, the args (x in this example) have to be repeated.

Try pipeline vars. So:

    loop (0) [x: select (x < 10) | emit | map (x + 1)]

Definitely more compact. Nesting:

    loop (0) [x: select (x < 10) | loop (0) [y: select (y < 10) | emit ((x, y)) | map (y + 1)] | map (x + 1)]

What does x value piped into the second loop do? DOESN'T HAVE TO BE
HANDLED. x is still in scope in the nested pipeline. Just reaching the
2nd loop is sufficient.


loop ((0,)) [i: \
    select (i < 3) | \
    loop ((0,)) [j: \
        select (j < 3) | \
        emit ((i, j)) | \
        map (j + 1)] \
    map (i + 1)]

This has problems.

- emit writes output to the end of the first loop, passing input to map (i + 1)
- Which isn't prepared to handle it.
