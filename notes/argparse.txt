Keep argparse?

Reasons for using argparse:

- arg parsing

- arg checking

- command help

Reality:

- Command help isn't that good. Had to write my own formatter. 

- setup_1() needs to check args, to support API. This duplicates the
  checking by argparse.

- argparse is geared to strings. Need hacks for other things. E.g. the
  pipeline_reference hack. More of this would be needed for expr args.

  argparse type doesn't really work for pipelines. The problem is that
  for this mechanism, the arg has to be a string visible to the type
  function. But pipelines aren't formed from a single string, they are
  formed from the parse of lots of strings.

Replacing argparse:

- args is just a sequence of tokens. Might want to add a Flag token
  type.

- setup_1() would have to do arg checking: required flags, mutual
  exclusion, types, etc.

----------------------------------------------------------------------

Args summary:

......................................................................

bash, sudo:

Pass everything on

......................................................................

bg, fg:

-j|--job        int job number
-p|--process    int pid

OR 

job_id          int job number

......................................................................

cd:

directory

......................................................................

dirs:

no args

......................................................................

edit:

optional command number

......................................................................

env:

no args

......................................................................

expand:

position:       optional int

......................................................................

fork:

fork_spec:      int or cluster name
pipeline:       Pipeline

......................................................................

gen:

-p|--pad       int padding
count          int
start          int

- No args: count is unlimited, start = 0
- one int: specified count, start = 0
- two ints: count and start

......................................................................

head, tail:

n:    int

......................................................................

help:

topic

......................................................................

history:

no args

......................................................................

jobs:

no args

......................................................................

join:

-k|--keep:      left join
pipeline:       Literal pipeline, or pipeline-valued arg.

......................................................................

ls:

-01r:           Depth
-f|--file:      Include files
-d|--dir:       Include dirs
-s|--symlink    Include symlinks

roots           0 or more paths

......................................................................

map:

function

......................................................................

out:

-a|--append     file
-f|--file       file
-c|--csv        t if present
format          optional string

......................................................................

popd:

No args

......................................................................

ps:

-u|--user:      username
-g|--group:     group name
-p|--pid:       pid
-c|--command:   string

......................................................................

pushd:

dir

......................................................................

pwd:

no args

......................................................................

red:

-i|--incremental:       t if present
functions:              1 or more

......................................................................

reverse:

no args

......................................................................

run:

command         int

......................................................................

select:

function

......................................................................

sort:

key     optional function

......................................................................

squish:

function        0 or more

......................................................................

timer:

-c|--components         t if present
interval                string

......................................................................

unique:

no args

......................................................................

version:

no args

......................................................................

window:

-o|--overlap    int
-d|--disjoint    int
predicate

Exactly one of these
