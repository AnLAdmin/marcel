- Pipline pickling (replace/restore function)

- PickleableException (transmission of stacks): Stacks aren't
  reported, but errors are now transmissible.

- remove_cr_lf

- clone (pickling)

- scp, ssh via spawning. Is there a native way to do this?

- print_stack

- Forks

- Write OshArgParser.exit to avoid SystemExit on argparse error.

- CommandKiller shouldn't print stack. (dev only),
  default_exception_handler too.

- Get rid of default and related exception handlers? (See ideas.txt on replacing stderr.)

----------------------------------------------------------------------

yield is more expensive than send/receive. See
experiments/sendreceive_vs_yield.py.

----------------------------------------------------------------------

Instead of stdout, stderr: One output stream. stdout -> stream as
is. stderr -> Error objects.

KillAndResumeException does some things right. Raises an exception and
allows for continuation of the command. What's wrong: Prints to
stderr, which isn't all that helpful. Really want to pass the error
along through ops until it hopefully reaches an out. So send/receive
needs to check for errors and pass them through.

UPDATE:

OK, now OshErrors show up in the stream:

    > gen 3 -1 | map (x: 5 / x)
    -5.0
    map(x: 5 / x) failed on (0,): division by zero
    5.0

The middle line of output is an OshError object. This enables testing
for errors, filtering them out, redirecting them to a file, etc.

But if the error happens remotely:

    > @jao [ gen 3 -1 | map (x: 5 / x) ]
    (localhost, -5.0)
    (localhost, map(x: 5 / x) failed on (0,): division by zero)
    (localhost, 5.0)

The error is now embedded and harder to test for. 

Idea:

- OshError is always embedded, typically in a 1-tuple.

- Testing for error looks for an OshError anywhere inside the tuple.

----------------------------------------------------------------------

- ctrl-c handling

----------------------------------------------------------------------\

namespace

----------------------------------------------------------------------

More modern string formatting

----------------------------------------------------------------------

Symlink: Include referenced file

----------------------------------------------------------------------

~ expansion

----------------------------------------------------------------------

- cd with no args.

----------------------------------------------------------------------

- What are the rules for ls & symbolic links? Need some equivalent to
  bash "ls -ld"?

----------------------------------------------------------------------

- File comparisons need to account for display_base.

----------------------------------------------------------------------

- Tab completion for ops should tailor the list to whether the op
  being completed is first in the pipline, or downstream. E.g., don't
  show select as a first op.


----------------------------------------------------------------------

.marcel.py has to use env vars as VAR.value. Any way to get rid of
.value? Or at least import it syntactically? E.g. $(VAR) wouldn't be
bad, but $ is not legal in an identifier.

EASY: Just update the namespace directly, when env vars are updated!
Also need to clear all Function.functions, so that they get
regenerated with the updated namespace. (Is this right? Need to
experiment.)

----------------------------------------------------------------------

File object uses os.stat/lstat. When a file is transmitted, stat
result should be cached in the file, and then not overridden on the
receving side. So the File needs to have a field indicating if it has
been transmitted/reconstructed.

----------------------------------------------------------------------

- ^emacs works -- a new window running GUI emacs is created. So does
  ^emacs -nw, doing exactly the right thing (non-graphical, in current
  terminal). But ^vi does not. Nothing appears to happen. But vi is
  listening for input, so :q exits. stderr complains about not being a
  terminal, but this isn't visible. Vi DOES work if subprocess.run
  omits stdout=PIPE and stderr=PIPE.

----------------------------------------------------------------------

- .marcel.py might want a cluster named jao and a terminal profile
  named jao. Need separate namespaces for these things.

----------------------------------------------------------------------

- pushd/popd

----------------------------------------------------------------------

Get rid of "from ... import ..."

----------------------------------------------------------------------

Tab completion for flags of executables.

----------------------------------------------------------------------

Clean up parser to prepare for more general handling of pipelines:

- @fork [ ... ] currently:

    - fork_start and fork_spec grammar states and actions.
    
    - InProgress has fork_spec field.

    - finish_pipeline assumes that a fork op is being completed.

- Generalize:

    + Treat fork like any other op. START action creates an op just
      like for a string. Don't need START_FORK and FORK_SPEC states.

    + Choice between LocalFork and RemoteFork can't be done by
      create_fork.  Keep choice inside Fork op, delegate instead of
      inherit.

    + Fork has to be a more standard op. The only thing special about it
      is the syntax used to invoke it, @.

    + create_op also has some op-specific logic, distinguishing op
      from executable, and using the bash operator in the latter case.

    + finish_pipeline: Remove special handling of fork op. The
      pipeline just goes into op.args.


----------------------------------------------------------------------

cd doesn't work because it's running in a Process. Doesn't affect the
env visible to the main process.

----------------------------------------------------------------------

red needs a counting primitive.

    ... | f (x: 1) | red +

is too verbose and arcane for something so common. Something like:

   ... | red #

Except that # is typically a shell comment marker.

Define a "count" function?

----------------------------------------------------------------------

- Markup 2.0.

- Modify docs to use the markup 2.0.

- Get rid of define_color, define_prompt, define_continuation_prompt.

- Merge env and config. Env vars are just top-level symbols in the
  namespace.



Env, config, global_state:

main: 

    - self.env = Environment(config_path)

    - self.global_state = GlobalState(env)

    - Main loop calls self.env.prompts() which mostly delegates to config.

    - Execution passes self.global_state to parser.

    - Main defines update_env_vars, which is used by JobControl to update
      vars modified by Job running in another process. These call env.setvar
      which then ends up in config.

env:

    - Reads parts of environment (user, host, homedir, current dir)

    - __init__ gets config_path from caller (main)

    - Sets env vars, self._vars

    - Create config and store in self._config.

    - self._color_scheme = color scheme from config.

    - Implements current dir operations: cd, pushd, popd, dirs,
      pwd. Dir stack is maintained in config, as a var. Problem with
      this approach: User can modify it directly, unless setvar() 
      checks for it. Same with PWD, which works in bash, but leads to
      weird results, e.g.

            jao@cheese:~$ PWD=/tmp
            jao@cheese:/tmp$ pwd
            /home/jao

    - Access to cluster, config, color_scheme, all of which reside in config.

config:

    - Has self._env_vars, prompt, continuation prompt.

    - self.function_namesspace is the namespace in which commands run. Defined by
      executing .marcel.py, in read_config. 

    - read_config puts Color, PROMPT, PROMPT_CONTINUATION, COLOR_SCHEME, define_cluster
      in globals(), passes to exec(.marcel.py). Then, COLOR_SCHEMA is put in function namespace.
      Should probably put everything there.

GlobalState:

    - Attached to parser, pipelines, available everywhere as a result.

    - Has env, edited_command, op_modules.

    - Provides function_namespace via delegation.


Cleanup:

+ Merge Environment and Configuration. Get rid of Configuration.

+ Put directory logic into its own class.

+ Replace GlobalState by Environment. Move GlobalState fields into
  Environment.

+ After execing .marcel.py, copy locals into globals. globals replaces
  function_namespace.

+ Move VERSION from env to an environment variable, MARCEL_VERSION.

-----------------------------------------------------------------------


Why is define_colors necessary? Just assign Colors to variables, which 
can then be referenced in define_color_schema, and define_prompt?

similarly, get rid of define_prompt, define_continuation_prompt.

Unify environment and config: Make the namespace the repository of env vars.


Need arbitrary colors in markup, e.g. so that colorized prompt can be
described.

----------------------------------------------------------------------

Need to handle {} chars in markup. See help_operator.py.

----------------------------------------------------------------------


Turn off color scheme for API

----------------------------------------------------------------------

API execution

- run(pipeline): Append Out() if not present, same as console.

- first(pipeline): 

    - Return the first result (or Error). 
    - Should Error raise exception (by default)?

- gather(pipeline):

    - Return all results in a list.

    - Options for Errors in output, errors in separate list, handler

- for x in pipeline: ...

    - What about Errors?

    - pipeline is terminted with gather, by default, returning errors
      in list. Allow for explicit gather() to control options.

----------------------------------------------------------------------

Need an api version of test_ops.
- Test run, gather, only

----------------------------------------------------------------------

Get rid of op.doc functions

----------------------------------------------------------------------

Can't rely on argparse type=... function to check inputs. Doesn't work
for API. Move checking to setup1().

----------------------------------------------------------------------

API: What to do about error handling, when there is no out operator
present? It would be nice to get the exit code too. What is the exit
code for a pipeline in bash?

----------------------------------------------------------------------

Turning off color scheme involves using a ColorScheme will all entries
set to None. Awkward for file extensions. Instead, do this by removing
the COLOR_SCHEME variable.

----------------------------------------------------------------------

Do __init__.py files need to specify __all__?

No.

----------------------------------------------------------------------

Now that there is File.readlines, expand no longer has to have special
handling for files.

----------------------------------------------------------------------

There is a lot of Op and Pipeline copying in the core __or__
functions. Try to minimize it. 

API performance is now terrible, (per profiler), due to the copying.

......................................................................

a = ls ...
b = a | map ... 
c = b | select ...

a: Create op, no copying
b: Copy a and the op
c: Copy b and the op

The problem is that the pipeline is mutable, and to protect the state
of each var's pipeline, a copy has to be made.

Alternative: 

- Build up immutable structures

- Create pipeline at execution time.

- Creating ops pre-execution is fine, but the pipelines have to be
  built later.


op1 | op2 -> Node(op1, op2)

node | op -> Node(node, op)

Example above:

a = ls
b = Node(ls, map)
c = Node(Node(ls, map), select)

Reassigning a var does not change anything previous computed form it.


a = ls | map
b = foo | bar
c = abc | def

a | b | c

equivalent to ls | map | foo | bar | abc | def. Don't need RunPipeline
to maintain the nested structure.


Remote(self, env, pipeline): needs work

----------------------------------------------------------------------

Need a way to dump the entire environment.
 
----------------------------------------------------------------------

fork() can be simplified by using Pipelineable.

----------------------------------------------------------------------

history command doesn't go into history, so this is missed:

    history | select (h: 'join' in h.command)

Can't recall it.

----------------------------------------------------------------------

Multiline command actually works without \. But then it doesn't get recalled
correctly on startup. 

- Allow omission of \
- But add it if missing, at least for stored history.


----------------------------------------------------------------------

x > y
x >> y

should be able to copy/append x to y. 

----------------------------------------------------------------------

- Licensing header


----------------------------------------------------------------------

File objects

- File navigation (parent, children, ...). Sort of works. Should
  _getattr() wrap a path (if delegation returns one) into a File?


----------------------------------------------------------------------

For tecmint article:

+ Run scripts, suppressing prompt

+ Generate minimal .marcel.py.

- Bugs:

    + 75
    + 76


----------------------------------------------------------------------

Need to suppress prompts if running piped-in script.

----------------------------------------------------------------------

Set ops.

----------------------------------------------------------------------

- Should the name of map be changed? f as in osh? apply? map doesn't
  really make sense when used as a generator. Could have gen handle
  this case through a function argument mutually exclusive with other
  args. So "gen 5" works like it always had, but "gen (5)" generates a
  5?!

----------------------------------------------------------------------

- Documentation of Errors. Revisit error handling: Since errors are
  now handled by Op, why do they need to be sent down the pipeline? We
  are no longer relying on out to print them. farcel's handler could
  pickle them immediately, (i.e., it doesn't have to rely on the error
  reaching the end of the pipeline).

----------------------------------------------------------------------

- shlex.quote() usage, and wildcards need to be
  reconsidered. Automatically quoting everything is wrong, (bug 38). So
  maybe the problem is that bash is wrong. Need to preserve the bash
  args exactly as written, quotes included, and pass it all to Popen. As
  things stand, we lose the quotes during parsing, and then add them
  back unconditionally.
  
  Globbing is tricky because it then requires great care to quote and
  escape properly, e.g. a\ b*, 'a b'*, 'a b*', (the first two are the
  same, the last has no wildcard).


----------------------------------------------------------------------

Should expand operate on filenames? Might be better to have a separate
command for that, e.g. cat.


----------------------------------------------------------------------

# as comment

----------------------------------------------------------------------

Get rid of argparse in main.

----------------------------------------------------------------------

squish is ALWAYS needed following window. Make this unnecessary.

----------------------------------------------------------------------

args -a|--all: gather everything from input stream. E.g.

    ls ... | args [files: cp (' '.join(files)) dest_dir]

Might want a builtin function for quoting a list of Files for a bash command, e.g. quote_files()

    ls ... | args [files: cp (quote_files(files)) dest_dir]

----------------------------------------------------------------------

ls -fr | ... | cp ???

Would like to copy all the incoming files somewhere. No way to do this
natively in marcel!

- Need a cp operator?

- It is doable with help from xargs: ...| xargs cp -t DEST

It would also be nice to be able to pipe files and directories into a removal operator.

----------------------------------------------------------------------

ls args of type pathlib.Path should work.

----------------------------------------------------------------------

env is hard to read. Make it easier:

- flags to obtain:

    - builtin symbols
    - symbols defined in config file
    - symbols defined via interaction 

----------------------------------------------------------------------

sql option to suppress printing of update counts.

----------------------------------------------------------------------

Allow read op to specify files as args?

----------------------------------------------------------------------

Cleanup setup_1/setup_2/set_env.

----------------------------------------------------------------------

Allow omitting of map in all contexts? E.g.

      ls | (f: f.size)

It already works! It's not a bug, it's a feature! As it turns out.

----------------------------------------------------------------------

File constructor is expensive. Not sure about pathlib.Path(), but
path.relative_to() must cost something. ls might be faster if this
were optimized. Measure & fix.

Profiling:

    import os
    import time
    
    from marcel.api import *
    
    start = time.time()
    run(ls('/home/jao/git', recursive=True, file=True) | select(lambda f: False))
    stop = time.time()
    msec = (stop - start) * 1000
    print(f'{msec} msec')

1808 msec
1790
1824
----
average: 1807

- Optimize File.__init__

    - store base, compute compact_path lazily

1417
1399
1403
----
average: 1406

- Optimize ls.send_path. 

    - path methods is_symlink, is_file, is_dir each involve a stat call.

1057
1082
1076
----
average: 1072
