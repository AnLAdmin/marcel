- Pipline pickling (replace/restore function)

- PickleableException (transmission of stacks): Stacks aren't
  reported, but errors are now transmissible.

- remove_cr_lf

- clone (pickling)

- scp, ssh via spawning. Is there a native way to do this?

- print_stack

- Forks

- Write OshArgParser.exit to avoid SystemExit on argparse error.

- CommandKiller shouldn't print stack. (dev only),
  default_exception_handler too.

- Get rid of default and related exception handlers? (See ideas.txt on replacing stderr.)

----------------------------------------------------------------------

yield is more expensive than send/receive. See
experiments/sendreceive_vs_yield.py.

----------------------------------------------------------------------

Instead of stdout, stderr: One output stream. stdout -> stream as
is. stderr -> Error objects.

KillAndResumeException does some things right. Raises an exception and
allows for continuation of the command. What's wrong: Prints to
stderr, which isn't all that helpful. Really want to pass the error
along through ops until it hopefully reaches an out. So send/receive
needs to check for errors and pass them through.

UPDATE:

OK, now OshErrors show up in the stream:

    > gen 3 -1 | map (x: 5 / x)
    -5.0
    map(x: 5 / x) failed on (0,): division by zero
    5.0

The middle line of output is an OshError object. This enables testing
for errors, filtering them out, redirecting them to a file, etc.

But if the error happens remotely:

    > @jao [ gen 3 -1 | map (x: 5 / x) ]
    (localhost, -5.0)
    (localhost, map(x: 5 / x) failed on (0,): division by zero)
    (localhost, 5.0)

The error is now embedded and harder to test for. 

Idea:

- OshError is always embedded, typically in a 1-tuple.

- Testing for error looks for an OshError anywhere inside the tuple.

----------------------------------------------------------------------

- ctrl-c handling

----------------------------------------------------------------------\

namespace

----------------------------------------------------------------------

More modern string formatting

----------------------------------------------------------------------

Symlink: Include referenced file

----------------------------------------------------------------------

~ expansion

----------------------------------------------------------------------

- cd with no args.

----------------------------------------------------------------------

- What are the rules for ls & symbolic links? Need some equivalent to
  bash "ls -ld"?

----------------------------------------------------------------------

- File comparisons need to account for display_base.

----------------------------------------------------------------------

- Tab completion for ops should tailor the list to whether the op
  being completed is first in the pipline, or downstream. E.g., don't
  show select as a first op.


----------------------------------------------------------------------

.marcel.py has to use env vars as VAR.value. Any way to get rid of
.value? Or at least import it syntactically? E.g. $(VAR) wouldn't be
bad, but $ is not legal in an identifier.

EASY: Just update the namespace directly, when env vars are updated!
Also need to clear all Function.functions, so that they get
regenerated with the updated namespace. (Is this right? Need to
experiment.)

----------------------------------------------------------------------

File object uses os.stat/lstat. When a file is transmitted, stat
result should be cached in the file, and then not overridden on the
receving side. So the File needs to have a field indicating if it has
been transmitted/reconstructed.

----------------------------------------------------------------------

