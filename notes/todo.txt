- Complete Python string parsing

- Complete shell string parsing (termination on things other than EOL
  and whiteapce).

- Licensing header

core.py:

- command state

- namespaces (add_to_namespace, namespace)

util.py:

- quote

- All varieties of formatting (for out op)

- Debugging & verbosity level

- Make File comparisons work -- based on absolute path.

- "ls -1" looks too much like "ls -l"

- Should the name of map be changed? f as in o? apply? map doesn't
  really make sense when used as a generator. Could have gen handle
  this case through a function argument mutually exclusive with other
  args. So "gen 5" works like it always had, but "gen (5)" generates a
  5?!

- What happens to processes that disappear? E.g. ps | .... ps yields
  non-existent processes which are then used downstream. Can this even
  happen?

- Symlink listing: include referenced file

- ps: If commandline blank, take contents of status file? That's what
  ps appears to do.

- more/less commands

- File navigation (parent, children, ...)

- ~ expansion

- ^emacs works -- a new window running GUI emacs is created. So does
  ^emacs -nw, doing exactly the right thing (non-graphical, in current
  terminal). But ^vi does not. Nothing appears to happen. But vi is
  listening for input, so :q exits. stderr complains about not being a
  terminal, but this isn't visible. Vi DOES work if subprocess.run
  omits stdout=PIPE and stderr=PIPE.

- redirection

- Organize internal ops -- Fork, LabelThread

- osh1 fork has to be first in top-level pipeline. Relax this?

- LOOK AT SHLEX MODULE -- COMMAND-LINE PARSING AND QUOTING


- .osh2rc might want a cluster named jao and a terminal profile named
  jao. Need separate namespaces for these things.


- OshError, File __repr__ do colorization. This is only correct for
  osh output. How can osh output be distinguished from other string
  conversions?

- Provide a default color scheme, better than everything = None.
