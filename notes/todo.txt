- Complete Python string parsing

- Complete shell string parsing (termination on things other than EOL
  and whiteapce).

- Debugging & verbosity level

- What happens to processes that disappear? E.g. ps | .... ps yields
  non-existent processes which are then used downstream. Can this even
  happen?

- ps: If commandline blank, take contents of Name from status file
  (enclosed in [])? That's what ps appears to do.

----------------------------------------------------------------------

Bash:

- What if there is an arg that is significant to marcel parsing, e.g. [, (.

----------------------------------------------------------------------

- Organize internal ops -- Fork, LabelThread

- How do exit codes fit in?

----------------------------------------------------------------------

Provide a way to specify farcel config path. Maybe as a property of
the cluster.

----------------------------------------------------------------------

Distinct color for broken symlink.

----------------------------------------------------------------------

Tab completion:

- Tab completion for command should distinguish between first op of
  pipeline and subsequent ones. I.e., only show those ops that can be
  used in the current position within the pipeline.

- Tab completion for directory should include / at end.

- Tab completion for file should include ' ' at end.

- Tab completion with more alternatives should end on the last common
  character.

----------------------------------------------------------------------

Add notion of current job, and then allow bg/fg ops to omit args.

----------------------------------------------------------------------

Would multiprocessing.Process provide better streaming than
subprocess.Popen? I.e., not waiting for op to complete.

----------------------------------------------------------------------

Make Bash.INTERACTIVE_EXECUTABLES an environment variable, so that it
can be customized by the user.

----------------------------------------------------------------------

Import bash env?

----------------------------------------------------------------------

Red:

- Need a red function for creating a list. + isn't a good choice, since it
  already does expected things for numbers and strings. 

- Can squish be eliminated in favor of some variation of red? 

Could at least generalize similar to expand. E.g. squish 1 would take
a sequence in position 1 and squish just that. So

(1, [[1]])
(2, [[2], [2]])
(3, [[3], [3], [3]])

 ->

(1, [1])
(2, [2, 2])
(3, [3, 3, 3])

----------------------------------------------------------------------

Should help output go through more?

----------------------------------------------------------------------

Configuration:

- Look in ~, /etc/marcel.

- Be able to specify config file (or multiple locations) in startup.

----------------------------------------------------------------------

History commands

- If history were in the namespace, then edited_command wouldn't need
  special handling.

----------------------------------------------------------------------

timer: allow interval to be an int or real (#sec)

----------------------------------------------------------------------

Revert to pickling if dill not present. And in that case, require
function source for remote execution.

----------------------------------------------------------------------

Not all ops can be used in API, e.g. edit, help. What about fork? remote?

----------------------------------------------------------------------

API needs documentation. help? HTML?

----------------------------------------------------------------------

Exit codes? (Not just an api issue)

----------------------------------------------------------------------

window: what is supposed to happen if overlap = 0? disjoint = 0? Not tested.
test types other than int

----------------------------------------------------------------------

sudo has a zillion args. How to express this on sudo()? **kwargs?

----------------------------------------------------------------------

todo: fork doc describes remote execution. Doesn't discuss @int, or
@sequence. Does @sequence even work? Non-remote versions are kind of
useless without more interesting kinds of sequences, and a way for
each copy of the pipeline to access the label.

----------------------------------------------------------------------

Merge Env and Main? Or maybe make Main the thing that is available
globally?

----------------------------------------------------------------------

first constructs an Exception out of an Error.

Is it feasible to have Error carry the original exception, and reraise
it, or at least an exception of the same type? What if the Error was
remote?

----------------------------------------------------------------------

ls spacing is too wide. How to pick a width? Buffer results? Don't
buffer and adapt?

----------------------------------------------------------------------

This is broken: Op.op_name() evalutes to "op".

    @staticmethod
    def check_arg(ok, arg, message):
        if not ok:
            cause = (f'Incorrect usage of {Op.op_name()}: {message}'
                     if arg is None else
                     f'Incorrect value for {arg} argument of {Op.op_name()}: {message}')
            raise marcel.exception.KillCommandException(cause)

----------------------------------------------------------------------

Import selected bash env variables? Can't see anything other than
EDITOR right now.

----------------------------------------------------------------------

ps lines are often long enough to wrap. Should render_full leave off
args? If so, then provide an args method.

----------------------------------------------------------------------

What if there are two shells running at the same time -- how is
history file maintained? Probably lose updates from the first one to
exit. How should this be handled? To be safe, on exit, should read,
append, write. Atomically.

----------------------------------------------------------------------

Cluster.set_host called by Remote.setup_2 and
Fork.attach_thread_label. Unclear why both are needed.

----------------------------------------------------------------------

API has fork and remote, and they are bound bound to Fork. remote
*intended* for remote execution. 

Need both remote and fork ops?

----------------------------------------------------------------------

Should jobs and commands be objects? That would allow for better
formatting.

----------------------------------------------------------------------

Should {...} work as a glob pattern? It does in bash. pathlib.Path.glob
doesn't.

ls -fr ~/git/marcel/{marcel,test} \
| select (f: f.suffix == '.py') \
| map (f: f.readlines()) \
| expand \
| red count
No qualifying paths: ['~/git/marcel/{marcel,test}']

----------------------------------------------------------------------

cat = [ map (f: (f, f.readlines())) | expand 1 ]
(cat)

prints:

    pipeline(map(f: (f, f.readlines())) | expand(1))

It would be nice to have the original source.

----------------------------------------------------------------------

These commands do different things:

    ls -fr **/*.py
    ls -fr | select (f: f.suffix == '.py')

The first one avoids symlinks (or symlinks to visited directories? or
files?). The second one explores both paths.

----------------------------------------------------------------------

I keep forgetting to set pipeline's error handler. Could be done by
Pipeline.copy.

----------------------------------------------------------------------

env has paths as strings. Should be Paths.

----------------------------------------------------------------------

Make namespace protected. Use vars() instead externally.  BTW:
"vars()" is not a good name for returning the namespace. globals()?

----------------------------------------------------------------------

ls API: Need to complain if depth is other than 0 or 1

----------------------------------------------------------------------

Exhaustive type error testing in API?

----------------------------------------------------------------------

stack traces: Include them, but have print_stack check a flag to
determine if they should really be printed.

----------------------------------------------------------------------

TestBase.reset_environment does too much. Move everything but Main
construction into subclasses.

----------------------------------------------------------------------

Controlling Popen processes:

https://pymotw.com/2/subprocess/#process-groups-sessions

----------------------------------------------------------------------

Pipelines:

- In parser, the create_op_variable check is useless. The variable
  value could change before execution, and may even cease to
  exist. Make create_op_variable the last resort, and then at runtime,
  complain if the var isn't defined, or if it's value is of the wrong
  type.

- Allow [...] to delimit a pipeline, even when not necessary. (Like {
  ... } around single statement if, in C.)


Should assign allow assignment of pipeline without brackets?

----------------------------------------------------------------------

Should a var hide an op by the same name?

----------------------------------------------------------------------

Oops, [] is overloaded:

M-0.9.17 jao@cheese:/tmp/csv$ ls [b-f]*.csv
Operator ls: filenames must be a string: [runpipeline(b-f)]

But escaping works:

M-0.10.6 jao@cheese:~$ ls \[p-r\]*
-rw-rw-r--   jao    jao       36883   2020 Jul 05 19:23:14   passwords.txt
-rw-r--r--   jao    jao       13377   2019 Jan 20 12:43:37   reality_distortion_field.md
-rw-rw-r--   jao    jao        2415   2019 Oct 06 23:13:49   reload.txt


----------------------------------------------------------------------

Can't run ssh!

----------------------------------------------------------------------

ls -fr | ... | cp ???

Would like to copy all the incoming files somewhere. No way to do this
natively in marcel!

- Need a cp operator?

- It is doable with help from xargs: ...| xargs cp -t DEST

----------------------------------------------------------------------

env options to print one var, or to find a var. Autocomplete.

----------------------------------------------------------------------

Replace now() by time(). (Code, doc)
