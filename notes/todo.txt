- Complete Python string parsing

- Complete shell string parsing (termination on things other than EOL
  and whiteapce).

- Licensing header

- Debugging & verbosity level

- Should the name of map be changed? f as in osh? apply? map doesn't
  really make sense when used as a generator. Could have gen handle
  this case through a function argument mutually exclusive with other
  args. So "gen 5" works like it always had, but "gen (5)" generates a
  5?!

- What happens to processes that disappear? E.g. ps | .... ps yields
  non-existent processes which are then used downstream. Can this even
  happen?

- ps: If commandline blank, take contents of Name from status file
  (enclosed in [])? That's what ps appears to do.

----------------------------------------------------------------------

File objects

- File navigation (parent, children, ...). Sort of works. Should
  _getattr() wrap a path (if delegation returns one) into a File?

----------------------------------------------------------------------

Bash:

- What if there is an arg that is significant to marcel parsing, e.g. [, (.

- shlex.quote() usage, and wildcards need to be
  reconsidered. Automatically quoting everything is wrong, (bug 38). So
  maybe the problem is that bash is wrong. Need to preserve the bash
  args exactly as written, quotes included, and pass it all to Popen. As
  things stand, we lose the quotes during parsing, and then add them
  back unconditionally.
  
  Globbing is tricky because it then requires great care to quote and
  escape properly, e.g. a\ b*, 'a b'*, 'a b*', (the first two are the
  same, the last has no wildcard).

----------------------------------------------------------------------

- Organize internal ops -- Fork, LabelThread

- out.receive does a lot of work. Precompute whatever can be.

- How do exit codes fit in?

----------------------------------------------------------------------

Glob patterns and marcel syntax both use [].

    M jao@cheese:/tmp/d$ ls [a-c]* | rm
    Parsing error at position 4 of "ls [a-c]* | rm": Expected string or pipe

Could handle the situation by being context-sensitive during the
parse.

This is going to be a problem now that pipelines can be args.

----------------------------------------------------------------------

Provide a way to specify farcel config path. Maybe as a property of
the cluster.

----------------------------------------------------------------------

Distinct color for broken symlink.

----------------------------------------------------------------------

Tab completion:

- Tab completion for command should distinguish between first op of
  pipeline and subsequent ones. I.e., only show those ops that can be
  used in the current position within the pipeline.

- Tab completion for directory should include / at end.

- Tab completion for file should include ' ' at end.

- Tab completion with more alternatives should end on the last common
  character.

----------------------------------------------------------------------

What happens if an arg that is supposed to be a pipeline is actually a
string looking exactly like a pipeline ref?

----------------------------------------------------------------------

Job should be in marcel.object. Maybe.

----------------------------------------------------------------------

Add notion of current job, and then allow bg/fg ops to omit args.

----------------------------------------------------------------------

Would multiprocessing.Process provide better streaming than
subprocess.Popen? I.e., not waiting for op to complete.

----------------------------------------------------------------------

Make Bash.INTERACTIVE_EXECUTABLES an environment variable, so that it
can be customized by the user.

----------------------------------------------------------------------

ps flags. E.g., -a

----------------------------------------------------------------------

Should expand operate on filenames? Might be better to have a separate
command for that, e.g. cat.

----------------------------------------------------------------------

Import bash env?

----------------------------------------------------------------------

Help:

- Allow for indented paragraphs. Equating indent and non-wrapping is
  probably a bad idea. Maybe find a Python markdown implementation?
  Still need colorizing.

Use these for help.

----------------------------------------------------------------------

Red:

- Need a red function for creating a list. + isn't a good choice, since it
  already does expected things for numbers and strings. 

- Can squish be eliminated in favor of some variation of red? 

Could at least generalize similar to expand. E.g. squish 1 would take
a sequence in position 1 and squish just that. So

(1, [[1]])
(2, [[2], [2]])
(3, [[3], [3], [3]])

 ->

(1, [1])
(2, [2, 2])
(3, [3, 3, 3])

----------------------------------------------------------------------

Should help output go through more?

----------------------------------------------------------------------

Configuration:

- Look in ~, /etc/marcel.

- Be able to specify config file (or multiple locations) in startup.

----------------------------------------------------------------------

History commands

- If history were in the namespace, then edited_command wouldn't need
  special handling.

----------------------------------------------------------------------

Cluster: Allow config of a single host

----------------------------------------------------------------------

Colorize help

Change "object" to "type"? People hate objects.

----------------------------------------------------------------------

timer: allow interval to be an int or real (#sec)

----------------------------------------------------------------------

Revert to pickling if dill not present. And in that case, require
function source for remote execution.

----------------------------------------------------------------------

Not all ops can be used in API, e.g. edit, help. What about fork? remote?

----------------------------------------------------------------------

API needs documentation. help? HTML?

----------------------------------------------------------------------

Exit codes? (Not just an api issue)

----------------------------------------------------------------------

window: what is supposed to happen if overlap = 0? disjoint = 0? Not tested.
test types other than int

----------------------------------------------------------------------

sudo has a zillion args. How to express this on sudo()? **kwargs?

----------------------------------------------------------------------

todo: fork doc describes remote execution. Doesn't discuss @int, or
@sequence. Does @sequence even work? Non-remote versions are kind of
useless without more interesting kinds of sequences, and a way for
each copy of the pipeline to access the label.

----------------------------------------------------------------------

Merge Env and Main? Or maybe make Main the thing that is available
globally?

----------------------------------------------------------------------

first constructs an Exception out of an Error.

Is it feasible to have Error carry the original exception, and reraise
it, or at least an exception of the same type? What if the Error was
remote?

----------------------------------------------------------------------

ls spacing is too wide. How to pick a width? Buffer results? Don't
buffer and adapt?

----------------------------------------------------------------------

Check csv formatting. Should strings have ' or "? They do, not sure
that's right. 

What if an output item contains a comma?

----------------------------------------------------------------------

This is broken: Op.op_name() evalutes to "op".

    @staticmethod
    def check_arg(ok, arg, message):
        if not ok:
            cause = (f'Incorrect usage of {Op.op_name()}: {message}'
                     if arg is None else
                     f'Incorrect value for {arg} argument of {Op.op_name()}: {message}')
            raise marcel.exception.KillCommandException(cause)

----------------------------------------------------------------------

Multiline command actually works without \. But then it doesn't get recalled
correctly on startup. 

- Allow omission of \
- But add it if missing, at least for stored history.

----------------------------------------------------------------------

edit command relies on bash EDITOR variable. Should use a marcel
variable.  Import selected bash env variables? Can't see anything
other than EDITOR right now.

----------------------------------------------------------------------

ps lines are often long enough to wrap. Should render_full leave off
args? If so, then provide an args method.

----------------------------------------------------------------------

What if there are two shells running at the same time -- how is
history file maintained? Probably lose updates from the first one to
exit. How should this be handled? To be safe, on exit, should read,
append, write. Atomically.

----------------------------------------------------------------------

Cluster.set_host called by Remote.setup_2 and
Fork.attach_thread_label. Unclear why both are needed.

----------------------------------------------------------------------

API has fork and remote, and they are bound bound to Fork. remote
*intended* for remote execution. 

----------------------------------------------------------------------

Should jobs and commands be objects? That would allow for better
formatting.

----------------------------------------------------------------------

Should {...} work as a glob pattern? It does in bash. pathlib.Path.glob
doesn't.

ls -fr ~/git/marcel/{marcel,test} \
| select (f: f.suffix == '.py') \
| map (f: f.readlines()) \
| expand \
| red count
No qualifying paths: ['~/git/marcel/{marcel,test}']

----------------------------------------------------------------------

# as comment

----------------------------------------------------------------------

cat = [ map (f: (f, f.readlines())) | expand 1 ]
(cat)

prints:

    pipeline(map(f: (f, f.readlines())) | expand(1))

It would be nice to have the original source.

----------------------------------------------------------------------

These commands do different things:

    ls -fr **/*.py
    ls -fr | select (f: f.suffix == '.py')

The first one avoids symlinks (or symlinks to visited directories? or
files?). The second one explores both paths.

----------------------------------------------------------------------

I keep forgetting to set pipeline's error handler. Could be done by
Pipeline.copy.

----------------------------------------------------------------------

env has paths as strings. Should be Paths.

----------------------------------------------------------------------

Make namespace protected. Use vars() instead externally.  BTW:
"vars()" is not a good name for returning the namespace. globals()?

----------------------------------------------------------------------

    TEST.run('x100 = [gen 3 | map (x: (x, x * 100))]')
    TEST.run(test='gen 4 | map (x: (x, -x)) | join x100',
             expected_out=[(0, 0, 0), (1, -1, 100), (2, -2, 200)])
    TEST.run(test='gen 4 | map (x: (x, -x)) | join [x100]',
             expected_out=[(0, 0, 0), (1, -1, 100), (2, -2, 200)])

Why should the last one work?

Well, this should work:

      gen 3 | map ... | join [x100 | ...]

----------------------------------------------------------------------

Get rid of argparse in main.

----------------------------------------------------------------------

ls API: Need to complain if depth is other than 0 or 1

----------------------------------------------------------------------

Revise op help. Without argparse, automatic generation of command line
and arg docs is gone.

----------------------------------------------------------------------

Exhaustive type error testing in API?

----------------------------------------------------------------------

stack traces: Include them, but have print_stack check a flag to
determine if they should really be printed.

----------------------------------------------------------------------

TestBase.reset_environment does too much. Move everything but Main
construction into subclasses.

----------------------------------------------------------------------

Make sure that help adapts to change in screen size. There's been
bitrot. See opmodule.reformat_help.

Does "help" use the op version or the topic version?
