OVERVIEW

Cloning (Pickling/unpickling) has been a constant source of trouble. 

- It is expensive.

- It occasionally runs into trouble due to things being pickled that
  weren't intended, or cannot be pickled. (The latter is less of an
  issue with dill.)

- Latest problem: Cloning a pipeline clones the env so execution of a
  function compiled against one env runs into trouble when run against
  a different one. See experiments/pickle_vs_eval.py.

A Pipeline has a linked list of Ops, and is mutable. Pipeline.append
adds a new Op to the end of the list, changing the Pipeline's
behavior. So when an Op has to be appended for implementation reasons,
the append has to be done to a copy, to avoid affecting anyone
depending on the original. E.g., PipelineIterator, join.

Fork copies its pipeline, so that each copy can have its own instance
of labelthread, each with its own label. An alternative is to have
labelthread use thread-local storage.

And of course, cloning is necessary for remote execution (sender
pickles, remote receiver unpickles).

----------------------------------------------------------------------

CLONING VS. FUNCTION NAMESPACES

Cloning creates functions that will break once we start relying on
namespace updates within a pipeline. E.g.

    ext = [select (f: f.suffix == e)]
    ls -fr | ext -e '.py'

ext filters files with extension e. The current implementation places
{'e': '.py'} in the namespace. This only works now because of a hack
in runpipeline:

    def receive(self, x):
        namespace = self.pipeline.first_op.env().namespace
        namespace.update(self.locals)

self.pipeline is a copy of ext (so that the receiver can be attached
to the top level pipeline's out). This reaches into
self.pipeline.first_op to modify the namespace attached to the copy of
the select op.

FIX

- Add an id to FunctionWrapper

- Pipeline maintains mapping from function id to FunctionWrapper.

- FW.__getstate__ returns function id only.

- Pipeline.copy, after calling util.copy(), uses the id->FW mapping to
  reconstitute FWs.

----------------------------------------------------------------------


    ext = [e: select (f: f.suffix == e)]
    ls -fr | ext -e '.py'
