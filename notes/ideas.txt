
Argument invocation from Nu: https://www.nushell.sh/blog/2020/06/09/nushell_0_15_0.html

Pipeline used to provide arg value. Sort of like API gather or
first. Functions are already allowed, so this is easy.

----------------------------------------------------------------------

From https://erayerdin.hashnode.dev/nushell-shell-redefined-ck9gbnphi06oucss1fvt0sgt4

- Object introspection via command.

- Understand textual formats, e.g. json. "open" command to open a file
  and pipe it.

- Look into direnv. Nushell has some idea of location-sensitive
  environment. A directory is a "shell", and I guess has its own
  environment.

----------------------------------------------------------------------

From shell-collab discussion:


Nushell and crush introduce metadata where the metadata is
created. Marcel does at the point of use.  Due to this discussion, I'm
now thinking of a generalized approach. If metadata were dervied for
tuple positions, or attached, then those names could substitute for
the named arguments later. In the a+b+c example, the pipeline would
look like this: ...| map (a, b, c: a+b+c)|... (you can omit
"lambda"). If the metadata were already there, it would be ...| map
(a+b+c)|...  How about deriving, or allowing attaching of, "column
names"?

Now:

    ps | map (p: (p.pid, p.commandline))

With metadata:

    ps | map ((pid, commandline))

But map gets a 1-tuple, so shouldn't it be:

    ps | map (p: (pid, commandline))

Could allow omission of the param list.

This works because ps yields Process objects, which have
properties. (Need to establish the criterion for deciding what things
in the dict turn into variables.)

Add metadata:

    gen 5 | map (x: (x, -x)) | label a b | select (a > 1) | map (a+b) | map (-a)

- First map issues 2-tuples.

- label op labels the columns, a and b.

- labels available to the select

- and to the 2nd map, which generates a 1-tuple. The label a
  applies. I.e., the labels apply to all downstream tuples.

What about branches?

   ... | label a b | ifelse (...) [map (a+b)] | map (a-b)

- a, b apply to the ifelse pipeline, and to the main pipeline.

What about this? In the ifelse pipeline, are references to a and b
legal? I.e., do c/d replace a/b?

   ... | label a b | ifelse (...) [label c d | map (a+b)] | map (a-b)

What about ps | map ((pid, commandline))? This is actually different!
It implies some intermediate stuff, i.e.

    ps | map (p: (p.pid, p.commandline, p.foobar)) | label pid commandline foobar | ...

----------------------------------------------------------------------

Now that reservoirs go to disk, it is feasible to have bg run quietly,
dumping to a reservoir. Of course, that is already possible by just
starting the command to store results.
