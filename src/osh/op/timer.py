"""C{timer [-c|--components] INTERVAL}

-c|--components            Output time as a tuple of components:
                           (year, month, day of month, hour, minute, second, day of week, day of year, dst)
    
Generates a sequence of timestamps, separated in time by the specified C{INTERVAL}
(approximately). The C{INTERVAL} format is::
    
    HH:MM:SS

where C{HH} is hours, C{MM} is minutes, C{SS} is seconds.  C{HH:} and
C{HH:MM:} may be omitted.

B{Examples}::

    INTERVAL        meaning
    -----------------------------
    5               5 seconds
    1:30            1 minute, 30 seconds
    1:00:00         1 hour

The output timestamp is time in seconds since 1/1/1970.

Notes:
    - month is 1-based (January = 1, February = 2, ...)
    - day of month is 1-based.
    - second can go as high as 61 due to leap-seconds.
    - day of week is 0-based, Monday = 0.
    - day of year is 1-based.
    - dst is 1 if Daylight Savings Time is in effect, 0 otherwise.
"""

import threading
import time

import osh.core


def timer():
    return Timer()


class TimerArgParser(osh.core.OshArgParser):

    def __init__(self):
        super().__init__('timer')
        self.add_argument('-c', '--components', action='store_true')
        self.add_argument('interval')


class Timer(osh.core.Op):

    argparser = TimerArgParser()

    def __init__(self):
        super().__init__()
        self.components = None
        self.metronome = None
        self.interval = None
        self.lock = threading.Condition()
        self.done = False
        self.now = None

    # BaseOp interface
    
    def doc(self):
        return __doc__

    def setup_1(self):
        self.interval = self.parse_interval(self.interval)
        self.metronome = Metronome(self)

    # BaseOp
    
    def execute(self):
        # Timer events are generated by the metronome class, which is a separate
        # thread. This keeps the intervals close to what is specified. If the
        # timer is run in the current thread, then the interval would control
        # the time between completion of downstream computing (invoked by self.send)
        # and the next timer event.
        self.metronome.start()
        while not self.done:
            self.lock.acquire()
            while self.now is None:
                # If the timeout is omitted from the wait call, then ctrl-c
                # cannot interrupt. The threading module implements wait
                # differently if a timeout is specified, waking up periodically.
                # TODO: Still true?
                self.lock.wait(1.0)
            now = self.now
            if not self.components:
                now = time.mktime(now)
            self.now = None
            self.lock.release()
            self.send(now)

    # Op

    def arg_parser(self):
        return Timer.argparser

    # For use by this module

    @staticmethod
    def parse_interval(interval):
        try:
            colon1 = interval.find(':')
            colon2 = -1
            if colon1 > 0:
                colon2 = interval.find(':', colon1 + 1)
            # Normalize
            if colon1 < 0:
                # No colons
                interval = '0:0:' + interval
            elif colon2 < 0:
                # One colon
                interval = '0:' + interval
            colon1 = interval.find(':')
            colon2 = interval.find(':', colon1 + 1)
            hh = int(interval[:colon1])
            mm = int(interval[colon1 + 1:colon2])
            ss = int(interval[colon2 + 1:])
            return hh * 3600 + mm * 60 + ss
        except Exception as e:
            raise osh.error.KillCommandException('Bad interval format: %s' % e)

    def register_tick(self):
        self.lock.acquire()
        self.now = time.localtime()
        self.lock.notifyAll()
        self.lock.release()


class Metronome(threading.Thread):

    def __init__(self, op):
        threading.Thread.__init__(self)
        self.interval = op.interval
        self.timer = op
        self.setDaemon(True)

    def run(self):
        while True:
            self.timer.register_tick()
            time.sleep(self.interval)
